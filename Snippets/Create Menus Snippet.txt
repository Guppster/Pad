//Creates the menubar for the window
    	JMenuBar menuBar = new JMenuBar();
    	
    	//Set the menubar on the frame
    	this.setJMenuBar(menuBar);
    	
    	//Build the main menus.         
    	JMenu menuFile = new JMenu("File");         
        menuBar.add(menuFile);
        JMenu menuEdit = new JMenu("Edit");
        menuBar.add(menuEdit);
        JMenu menuView = new JMenu("View");
        menuBar.add(menuView); 
        JMenu menuHelp = new JMenu("Help");
        menuBar.add(menuHelp);
        JMenu menuAdmin = new JMenu("Admin Tools");
        menuBar.add(menuAdmin);
        final JMenu menuTimeout = new JMenu("Timeout user");
        JMenuItem subMenu = new JMenuItem("1 Minute");
        JMenuItem subMenu2 = new JMenuItem("5 Minutes");
        JMenuItem subMenu3 = new JMenuItem("10 Minutes");
        JMenuItem subMenu4 = new JMenuItem("30 Minutes");

        //The menu items for the file menu
        JMenuItem menuNew = new JMenuItem("New");
        menuNew.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N, ActionEvent.CTRL_MASK));
        menuFile.add(menuNew);
        JMenuItem menuOpen = new JMenuItem("Open");
        menuOpen.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O, ActionEvent.CTRL_MASK));
        menuFile.add(menuOpen);
        JMenuItem menuSave = new JMenuItem("Save");
        menuSave.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.CTRL_MASK));
        menuFile.add(menuSave);
        JMenuItem menuSaveAs = new JMenuItem("Save As");
        menuSaveAs.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, KeyEvent.CTRL_MASK + KeyEvent.SHIFT_MASK)); 
        menuFile.add(menuSaveAs);
        JMenuItem menuPrint = new JMenuItem("Print");
        menuPrint.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_P, ActionEvent.CTRL_MASK));
        menuFile.add(menuPrint);
        JMenuItem menuPrintPrev = new JMenuItem("Print Preview");
       	menuPrintPrev.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_P, ActionEvent.CTRL_MASK + KeyEvent.SHIFT_MASK));
        menuFile.add(menuPrintPrev);
        JMenuItem menuPrintSet = new JMenuItem("Print Setup");
       	menuPrintSet.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.SHIFT_MASK));
        menuFile.add(menuPrintSet);

        JMenuItem menuExit = new JMenuItem("Exit");
        menuExit.addActionListener(new ActionListener()
        	{
	            public void actionPerformed(ActionEvent event)
	            {
	                System.exit(0);
	            }
        	});
        menuFile.add(menuExit);
       
        //The menu items for the edit menu
        JMenuItem menuUndo = new JMenuItem("Undo");
        menuUndo.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Z, ActionEvent.CTRL_MASK));
        menuEdit.add(menuUndo);
        JMenuItem menuRedo = new JMenuItem("Redo");
        menuRedo.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Y, ActionEvent.CTRL_MASK));
        menuEdit.add(menuRedo);
        JMenuItem menuCut = new JMenuItem("Cut");
        menuCut.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_X, ActionEvent.CTRL_MASK));
        menuEdit.add(menuCut);
        menuCut.addActionListener(new ActionListener()
        {
	            public void actionPerformed(ActionEvent event)
	            {
	               Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();		
	               TransferHandler transferHandler = textPane.getTransferHandler();		
	               transferHandler.exportToClipboard(textPane, clipboard, TransferHandler.COPY);
	               textPane.replaceSelection("");
	            }
       	});
       	
        JMenuItem menuCopy = new JMenuItem("Copy");
        menuCopy.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_C, ActionEvent.CTRL_MASK));
        menuEdit.add(menuCopy);
        menuCopy.addActionListener(new ActionListener()
        {
	            public void actionPerformed(ActionEvent event)
	            {
	               Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();		
	               TransferHandler transferHandler = textPane.getTransferHandler();		
	               transferHandler.exportToClipboard(textPane, clipboard, TransferHandler.COPY);
	            }
       	});
       	
        JMenuItem menuPaste = new JMenuItem("Paste");
        menuPaste.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_V, ActionEvent.CTRL_MASK));
        menuEdit.add(menuPaste);
        menuPaste.addActionListener(new ActionListener()
        {
	            public void actionPerformed(ActionEvent event)
	            {
	               Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();		
	               TransferHandler transferHandler = textPane.getTransferHandler();		
	               transferHandler.importData(textPane, clipboard.getContents(null));
	            }
       	});
       	
        JMenuItem menuSelectA = new JMenuItem("Select All");
        menuSelectA.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_A, ActionEvent.CTRL_MASK));
        menuEdit.add(menuSelectA);
        menuSelectA.addActionListener(new ActionListener()
        {
	            public void actionPerformed(ActionEvent event)
	            {
	              	textPane.selectAll();
	            }
       	});
        JMenuItem menuFindRep = new JMenuItem("Find and Replace");
        menuFindRep.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F, ActionEvent.CTRL_MASK));
        menuEdit.add(menuFindRep);
        
        //The menu items for the view menu
        JCheckBoxMenuItem menuShowTime = new JCheckBoxMenuItem("Show Timestamp");// ##WONT NEED##
        menuShowTime.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_T, ActionEvent.CTRL_MASK));
        menuView.add(menuShowTime);
        menuShowTime.addActionListener(new ActionListener()
        {
	            public void actionPerformed(ActionEvent event)
	            {	
	              	if(display == true)
	              	{
		    			timeStamp.setText("Version 1.0.0 ALPHA " + "\n" + dateFormat.format(verDate));
		    			display = false;
	              	}
					else if(display == false)
					{
						timeStamp.setText("");
						display = true;
					}		
	            }
       	});// ##WONT NEED##
       
         
        JMenuItem menuTextColour = new JMenuItem("Choose Text Colour");
        menuTextColour.addActionListener(new ActionListener()
        	{
	            public void actionPerformed(ActionEvent event)
	            {
	                colour = JColorChooser.showDialog(null,"Choose A Text Colour", colour);
	                
	                if(colour == null)
	                {
	                	colour = (Color.BLACK);
	                }
	                //Print the colour that we chose ­ (Using this to see if the colour chooser is working)
	                System.out.println(colour);
					
	                //VERY IMPORTANT ­ ADDS COLOUR(STYLE) TO THE TEXTPANE OBJECT
	                //[component to be added to, attribute(bold, colour, etc)] 
    				StyleConstants.setForeground(styleForSelected, colour);
    				//VERY IMPORTANT ­ ADDS COLOUR(STYLE) TO THE TEXTPANE OBJECT
					StyleConstants.setForeground(styleForTyping, colour);

					caretPosition = textPane.getCaretPosition();

		            try 
		    		{   	
		               	//Get the selected text
		               	selectedText = textPane.getSelectedText();
		               	//Find where the start of the selection is
		               	startOfSelect = textPane.getSelectionStart();
		               	//Find out how many letters are selected
		               	selectNum = selectedText.length();

			    		//Remove text starting from selection start and delete the characters selected\
			    		//.remove(start of select,how many characters to remove);
				        textPane.getStyledDocument().remove(startOfSelect, selectNum);
				        //(position, text to be inserted, style(color, etc))
			    		doc.insertString(startOfSelect, selectedText, styleForSelected);
			    		selectedText = "";
		            	
		           	} catch(Exception e) { e.printStackTrace(); }
	    		
	            }
        	});
        	
        	textPane.addKeyListener(new KeyListener() 
    		{
			    public void keyTyped(KeyEvent ex){}
    			public void keyPressed(KeyEvent ex)
    			{
    				caretPosition = textPane.getCaretPosition();
			    	System.out.println(caretPosition);
					System.out.println(styleForTyping);

					try 
		    		{
						doc.insertString(caretPosition, ex.getKeyChar() + "", styleForTyping);
						doc.remove(caretPosition, 1);	
					} catch(Exception e) { e.printStackTrace(); } 
    			}
				public void keyReleased(KeyEvent ex){} 
			}
	    );
        	
        menuEdit.add(menuTextColour);
        
        //The menu items for the help menu
        JMenuItem menuTutor = new JMenuItem("Tutorials");
        menuTutor.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_H, ActionEvent.CTRL_MASK));
        menuTutor.addActionListener(new ActionListener()
        {
	            public void actionPerformed(ActionEvent event)
	            {	
	              	System.out.println("'Tutorial' Tab Works!");		
	            }
	            
       	});
        menuHelp.add(menuTutor);
        
        //The menu items for the document admin menu
        JMenuItem menuKick = new JMenuItem("Kick user");
        menuKick.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_K, ActionEvent.CTRL_MASK));
       	menuKick.addActionListener(new ActionListener()
        {
	            public void actionPerformed(ActionEvent event)
	            {	
	              	System.out.println("'Kick' function works!");
	              	System.exit(0);		
	            }
	            
       	});
        menuAdmin.add(menuKick);
        
        JMenuItem menuBan = new JMenuItem("Ban user");
        menuBan.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_B, ActionEvent.CTRL_MASK));
       	menuBan.addActionListener(new ActionListener()
        {
	            public void actionPerformed(ActionEvent event)
	            {	
	              	System.out.println("'Ban' function works!");		
	            }
	            
       	});
        menuAdmin.add(menuBan);
        
        menuLock = new JMenuItem("Lock Document Screen");
        menuLock.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_L, ActionEvent.CTRL_MASK));
       	menuLock.addActionListener(new ActionListener()
        {
	            public void actionPerformed(ActionEvent event)
	            {	
	            	//Change the attributes back to normal if enabled = true
				    if(enabled == true)
				    {
				      textPane.setEnabled(true);
				      textPane.setBackground(Color.white);
				      menuLock.setText("Lock Document Screen");
				      System.out.println("'Unlockout' function works!");
				      enabled = false;        		
				    }
				    else if(enabled == false) 
				    {
				    	//Change the textPane to uneditable, and set the colour to grey
					    textPane.setEnabled(false);
					    textPane.setBackground(Color.lightGray);
					    System.out.println("'Lockout' function works!");
					    //Set enabled to true, so if this menu is clicked again, it changes back to normal
					    menuLock.setText("Unlock Document Screen");
					    enabled = true;
				    }	
	            }
	            
       	});
        menuAdmin.add(menuLock);
        
        //subMenu.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Q, ActionEvent.CTRL_MASK));
       	subMenu.addActionListener(new ActionListener()
        {
	            public void actionPerformed(ActionEvent event)
	            {	
	            	//Change the textPane to uneditable, and set the colour to grey
					textPane.setEnabled(false);
					textPane.setBackground(Color.lightGray);
					timer.start();
					menuTimeout.setEnabled(false);
	            }     
       	});
       	
       	//subMenu2.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Q, ActionEvent.CTRL_MASK));
       	subMenu2.addActionListener(new ActionListener()
        {
	            public void actionPerformed(ActionEvent event)
	            {	
	            	//Change the textPane to uneditable, and set the colour to grey
					textPane.setEnabled(false);
					textPane.setBackground(Color.lightGray);
					timer2.start();
					menuTimeout.setEnabled(false);
	            }     
       	});
       	
       	//subMenu.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Q, ActionEvent.CTRL_MASK));
       	subMenu3.addActionListener(new ActionListener()
        {
	            public void actionPerformed(ActionEvent event)
	            {	
	            	//Change the textPane to uneditable, and set the colour to grey
					textPane.setEnabled(false);
					textPane.setBackground(Color.lightGray);
					timer3.start();
					menuTimeout.setEnabled(false);
	            }     
       	});
       	
       	//subMenu.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Q, ActionEvent.CTRL_MASK));
       	subMenu4.addActionListener(new ActionListener()
        {
	            public void actionPerformed(ActionEvent event)
	            {	
	            	//Change the textPane to uneditable, and set the colour to grey
					textPane.setEnabled(false);
					textPane.setBackground(Color.lightGray);
					timer4.start();
					menuTimeout.setEnabled(false);
	            }     
       	});
       	
     	//Add the submenu's to the timeout menu
       	menuTimeout.add(subMenu);
        menuTimeout.add(subMenu2);
        menuTimeout.add(subMenu3);
        menuTimeout.add(subMenu4);
        //Add the timeout menu to the admin menubar
     	menuAdmin.add(menuTimeout);
          
        JMenuItem menuOptions = new JMenuItem("Document Options");
        menuOptions.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_D, ActionEvent.CTRL_MASK));
       	menuOptions.addActionListener(new ActionListener()
        {
	            public void actionPerformed(ActionEvent event)
	            {	
	              	//DocumentOptions options = new DocumentOptions();
	              	new DocumentOptions();		
	            }
	            
       	});
        menuAdmin.add(menuOptions);